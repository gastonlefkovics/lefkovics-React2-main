{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayed_\\\\OneDrive\\\\Escritorio\\\\AidFialeh-React2\\\\src\\\\components\\\\ItemCount\\\\ItemCount.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\n//1) Importar una función de React que me ayuda a trabajar con el estado. (useState)\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ItemCount = (inicial, stock, funcionAgregar) => {\n  _s();\n  //Acá en la parte superior del componente siempre voy a trabajr con los hooks: \n  const [contador, setContador] = useState(inicial);\n\n  //Entre los () voy a pasarle el valor inicial del estado. \n  //2) useState me retorna un array con dos elementos. El primero es el estado y el segundo es una función que me actualiza el valor del estado. \n\n  //Funciones para los eventos: \n\n  const incrementar = () => {\n    if (contador < stock) {\n      setContador(contador + 1);\n    }\n  };\n  const decrementar = () => {\n    if (contador > inicial) {\n      setContador(contador - 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementar,\n        children: \" - \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", contador, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementar,\n        children: \" + \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => funcionAgregar(contador),\n      children: \" Agregar al Carrito \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n//Incrementar y decrementar van sin parentesis porque si no se ejecutarían al momento de renderizar el componente. Y solo queremos que se ejecute cuando el visitante haga click en los botones. \n_s(ItemCount, \"3Ho9/XFKXkZnruxZktEDfrZ1XaM=\");\n_c = ItemCount;\nexport default ItemCount;\nvar _c;\n$RefreshReg$(_c, \"ItemCount\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","ItemCount","inicial","stock","funcionAgregar","_s","contador","setContador","incrementar","decrementar","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ayed_/OneDrive/Escritorio/AidFialeh-React2/src/components/ItemCount/ItemCount.jsx"],"sourcesContent":["import React from 'react'\r\n//1) Importar una función de React que me ayuda a trabajar con el estado. (useState)\r\nimport { useState } from 'react'\r\n\r\nconst ItemCount = (inicial, stock, funcionAgregar) => {\r\n    //Acá en la parte superior del componente siempre voy a trabajr con los hooks: \r\n    const [contador, setContador] = useState(inicial);\r\n\r\n\r\n\r\n\r\n\r\n    //Entre los () voy a pasarle el valor inicial del estado. \r\n    //2) useState me retorna un array con dos elementos. El primero es el estado y el segundo es una función que me actualiza el valor del estado. \r\n\r\n    //Funciones para los eventos: \r\n\r\n    const incrementar = () => {\r\n        if(contador < stock) {\r\n            setContador(contador + 1);\r\n        }\r\n    }\r\n\r\n    const decrementar = () => {\r\n        if(contador > inicial){\r\n            setContador(contador - 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <button onClick={ decrementar }> - </button>\r\n                <p> {contador} </p>\r\n                <button onClick={ incrementar }> + </button>\r\n            </div>\r\n            <button onClick={()=> funcionAgregar(contador)}> Agregar al Carrito </button>\r\n        </>\r\n      )\r\n}\r\n\r\n//Incrementar y decrementar van sin parentesis porque si no se ejecutarían al momento de renderizar el componente. Y solo queremos que se ejecute cuando el visitante haga click en los botones. \r\n\r\nexport default ItemCount"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAASC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhC,MAAMC,SAAS,GAAGA,CAACC,OAAO,EAAEC,KAAK,EAAEC,cAAc,KAAK;EAAAC,EAAA;EAClD;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAACM,OAAO,CAAC;;EAMjD;EACA;;EAEA;;EAEA,MAAMM,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAGF,QAAQ,GAAGH,KAAK,EAAE;MACjBI,WAAW,CAACD,QAAQ,GAAG,CAAC,CAAC;IAC7B;EACJ,CAAC;EAED,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAGH,QAAQ,GAAGJ,OAAO,EAAC;MAClBK,WAAW,CAACD,QAAQ,GAAG,CAAC,CAAC;IAC7B;EACJ,CAAC;EAED,oBACIR,OAAA,CAAAE,SAAA;IAAAU,QAAA,gBACIZ,OAAA;MAAAY,QAAA,gBACIZ,OAAA;QAAQa,OAAO,EAAGF,WAAa;QAAAC,QAAA,EAAC;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC5CjB,OAAA;QAAAY,QAAA,GAAG,GAAC,EAACJ,QAAQ,EAAC,GAAC;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACnBjB,OAAA;QAAQa,OAAO,EAAGH,WAAa;QAAAE,QAAA,EAAC;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eACNjB,OAAA;MAAQa,OAAO,EAAEA,CAAA,KAAKP,cAAc,CAACE,QAAQ,CAAE;MAAAI,QAAA,EAAC;IAAoB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAC/E,CAAC;AAEX,CAAC;;AAED;AAAAV,EAAA,CArCMJ,SAAS;AAAAe,EAAA,GAATf,SAAS;AAuCf,eAAeA,SAAS;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}